name: ci
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
jobs:
  test:
    runs-on: ${{ matrix.platform }}
    strategy:
      matrix:
        platform: [ubuntu-latest, windows-latest]
        python-version: ["3.8", "3.9", "3.x"]

    env:
      PY_COLORS: 1

    steps:
      - uses: actions/checkout@v4

      - name: Install Poetry
        run: pipx install poetry

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: poetry

      - name: Install base dependencies
        run: poetry install

      - name: Install optional dependencies
        if: matrix.platform != 'windows-latest'
        run: |
          sudo apt update
          sudo apt install ffmpeg
          poetry install --extras replaygain

      - name: Test older Python versions
        if: matrix.python-version != '3.x'
        run: poetry run project test

      - name: Upload code coverage
        if: matrix.python-version == '3.8' && matrix.platform == 'ubuntu-latest'
        continue-on-error: true
        run: codecov

      - name: Check types
        if: matrix.python-version == '3.x'
        # continue-on-error is not ideal since it doesn't give a visible
        # warning, but there doesn't seem to be anything better:
        # https://github.com/actions/toolkit/issues/399
        continue-on-error: true
        run: poetry run project check-types

  test-docs:
    runs-on: ubuntu-latest

    env:
      PY_COLORS: 1

    steps:
      - uses: actions/checkout@v4

      - name: Install Poetry
        run: pipx install poetry

      - name: Set up Python 3.x
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"
          cache: poetry

      - name: Install base dependencies
        run: poetry install

      - name: Add problem matcher
        run: echo "::add-matcher::.github/sphinx-problem-matcher.json"

      - name: Build and check docs
        run: poetry run project docs

  lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install Poetry
        run: pipx install poetry

      - name: Set up Python 3.x
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"
          cache: poetry

      - name: Install base dependencies
        run: poetry install

      - name: Add problem matcher
        run: echo "::add-matcher::.github/flake8-problem-matcher.json"

      - name: Lint with flake8
        run: poetry run project lint
